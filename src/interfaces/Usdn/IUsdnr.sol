// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { IERC20Metadata } from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";

import { IUsdn } from "./IUsdn.sol";

/**
 * @title USDnr Token Interface
 * @notice The USDnr token is a wrapper around the USDN token, allowing users to wrap and unwrap USDN at a 1:1 ratio.
 */
interface IUsdnr is IERC20Metadata {
    /**
     * @notice The yield generated by the underlying USDN tokens has been withdrawn.
     * @param recipient The address that received the yield.
     * @param amount The amount of yield withdrawn.
     */
    event USDnrYieldWithdrawn(address recipient, uint256 amount);

    /**
     * @notice The yield recipient has been updated.
     * @param newYieldRecipient The new address of the yield recipient.
     */
    event USDnrYieldRecipientUpdated(address newYieldRecipient);

    /// @notice The amount provided is zero.
    error USDnrZeroAmount();

    /// @notice The recipient address is the zero address.
    error USDnrZeroRecipient();

    /// @notice There is no yield available to withdraw.
    error USDnrNoYield();

    /**
     * @notice Previews the amount of USDnr that would be received for wrapping a given amount of USDN shares.
     * @param usdnSharesAmount The amount of USDN shares to wrap.
     * @return wrappedAmount_ The amount of USDnr that would be received.
     */
    function previewWrapShares(uint256 usdnSharesAmount) external view returns (uint256 wrappedAmount_);

    /**
     * @notice Returns the address that will receive the yield when {withdrawYield} is called.
     * @return yieldRecipient_ The address of the yield recipient.
     */
    function getYieldRecipient() external view returns (address yieldRecipient_);

    /**
     * @notice Sets a new address to receive the yield when {withdrawYield} is called.
     * @dev Can only be called by the owner.
     * @param newYieldRecipient The address of the new yield recipient.
     */
    function setYieldRecipient(address newYieldRecipient) external;

    /**
     * @notice Wraps USDN into USDnr at a 1:1 ratio.
     *  @dev When approving USDN, use the `convertToTokensRoundUp` of the user shares, as we always round up when
     * deducting from a token transfer allowance.
     * @param usdnAmount The amount of USDN to wrap.
     * @param recipient The address to receive the USDnr tokens.
     */
    function wrap(uint256 usdnAmount, address recipient) external;

    /**
     * @notice Wraps USDN shares into USDnr.
     * @dev The shares must represent at least 1 wei of USDN token. The conversion ratio is 1:1 with the USDN amount.
     * @param usdnSharesAmount The amount of USDN shares to wrap.
     * @param recipient The address to receive the USDnr tokens.
     * @return wrappedAmount_ The amount of USDN tokens that were wrapped, and the amount of USDnr tokens minted.
     */
    function wrapShares(uint256 usdnSharesAmount, address recipient) external returns (uint256 wrappedAmount_);

    /**
     * @notice Unwraps USDnr into USDN at a 1:1 ratio.
     * @param usdnrAmount The amount of USDnr to unwrap.
     * @param recipient The address to receive the USDN tokens.
     */
    function unwrap(uint256 usdnrAmount, address recipient) external;

    /**
     * @notice Returns the address of the USDN token contract.
     * @return usdn_ The address of the USDN token contract.
     */
    function USDN() external view returns (IUsdn usdn_);

    /**
     * @notice Withdraws the yield generated by the underlying USDN tokens to the `_yieldRecipient`.
     * @dev The yield is the difference between the USDN balance of the contract and the total supply of USDnr. To
     * calculate the balance we use `USDN.sharesOf(address(this)) / USDN.divisor()` to round down, ensuring that all
     * USDnr tokens are always fully backed by USDN.
     */
    function withdrawYield() external;
}
